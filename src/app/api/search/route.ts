import { getSearchQuery } from '@/lib/backend/search_engine/getSearchQuery'

// swagger

/*
[
	{
		"_id": "6659e57473621ed878b18f17",
		"id": 78127,
		"name": "Thai Express - Món Thái - Phan Xích Long",
		"address": "183 Phan Xích Long, P. 2",
		"latitude": 10.7982387,
		"longitude": 106.6879113,
		"imgLink": "https://images.foody.vn/res/g8/78127/prof/s640x400/foody-upload-api-foody-mobile-avt_now_thaiexpress-200410154153.jpg",
		"detailUrl": "https://www.foody.vn/ho-chi-minh/thai-express-mon-thai-phan-xich-long",
		"category": "food/nha-hang",
		"openingTime": [
			[
				[
					"11:00",
					"20:00"
				]
			],
			[
				[
					"11:00",
					"20:00"
				]
			],
			[
				[
					"11:00",
					"20:00"
				]
			],
			[
				[
					"11:00",
					"20:00"
				]
			],
			[
				[
					"11:00",
					"20:00"
				]
			],
			[
				[
					"11:00",
					"20:00"
				]
			],
			[
				[
					"11:00",
					"20:00"
				]
			]
		],
		"priceRange": [
			55000,
			170000
		],
		"exactMatch": 1,
		"score": 12.204045295715332
	},
*/

/**
 * @swagger
 * /api/search:
 *   get:
 *     summary: Get search results
 *     description: Retrieve search results for a given query.
 *     parameters:
 *       - in: query
 *         name: query
 *         schema:
 *           type: string
 *         required: true
 *         description: The search query.
 *     responses:
 *       200:
 *         description: A JSON object containing the search results.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 results:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                      _id:
 *                       type: string
 *                       description: The ID of the search result (generated by mongodb).
 *                      id:
 *                       type: number
 *                       description: The ID of the search result.
 *                      name:
 *                        type: string
 *                        description: The name of the location.
 *                      address:
 *                        type: string
 *                        description: The address of the location.
 *                      latitude:
 *                        type: number
 *                        description: The latitude of the location.
 *                      longitude:
 *                        type: number
 *                        description: The longitude of the location.
 *                      imgLink:
 *                        type: string
 *                        description: The image link of the location.
 *                      detailUrl:
 *                        type: string
 *                        description: The detail URL of the location.
 *                      category:
 *                        type: string
 *                        description: The category of the location.
 *                      openingTime:
 *                        type: any
 *                        description: The opening time of the location.
 *
 *       400:
 *         description: Bad request.
 *       500:
 *         description: Internal server error.
 */
export async function GET(request: Request) {
  try {
    const url = new URL(request.url)
    const query = url.searchParams.get('query')

    if (!query) {
      return new Response(
        JSON.stringify({ error: 'Missing query parameter' }),
        { status: 400 },
      )
    }

    const result = await getSearchQuery(query)

    return new Response(JSON.stringify(result), { status: 200 })
  } catch (err) {
    return new Response(JSON.stringify({ error: err }), { status: 500 })
  }
}
